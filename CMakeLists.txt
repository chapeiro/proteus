cmake_minimum_required(VERSION 2.8)
project(raw)

find_program(CLANG_CXX_COMPILER "clang++")
SET (CMAKE_CXX_COMPILER "${CLANG_CXX_COMPILER}")
find_program(CLANG_C_COMPILER "clang")
SET (CMAKE_C_COMPILER "${CLANG_C_COMPILER}")

# look for Boost related compilation flags
find_package(Boost REQUIRED)

# look for LLVM related compilation flags slightly complicated way, the Ubuntu
# cmake module file is wrong and we have to hack something instead.
find_program(LLVM_CONFIG "llvm-config")
if(${LLVM_CONFIG} STREQUAL "LLVM_CONFIG-NOTFOUND")
    message(FATAL_ERROR "LLVM not found")
endif()
execute_process(COMMAND llvm-config --cppflags OUTPUT_VARIABLE LLVM_CPPFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --includedir OUTPUT_VARIABLE LLVM_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --ldflags OUTPUT_VARIABLE llvm_ldflags OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --libs OUTPUT_VARIABLE llvm_libs OUTPUT_STRIP_TRAILING_WHITESPACE)

# build libjsmn
file(GLOB jsmn jsmn/*.c)
add_library(jsmn ${jsmn})

include_directories("${PROJECT_SOURCE_DIR}")

# various dependencies (e.g., glog) may not be available through repos - esp. on the servers
#include_directories("$ENV{HOME}/include" "/cloud_store/manosk/vida-engine/include/")
include_directories("$ENV{HOME}/include" "/cloud_store/manosk/vida-engine/include/")
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} )
find_library(GLOG NAMES libglog glog HINTS "$ENV{HOME}/lib" PATHS "/cloud_store/manosk/vida-engine/lib")
if(${GLOG} STREQUAL "GLOG-NOTFOUND")
    message(FATAL_ERROR "Glog not found!")
endif()
set(glog_ldflags "-L$ENV{HOME}/lib" "-L/cloud_store/manosk/vida-engine/lib")

SET(GCC_COMPILE_FLAGS "-march=core-avx2 -msse4 -O0 -ftree-vectorize -march=native -mtune=native -g -ggdb -fno-omit-frame-pointer")
SET( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COMPILE_FLAGS}" )
#add_definitions(${GCC_COMPILE_FLAGS})

# code generation library
file(GLOB codegen common/*.cpp util/*.cpp util/radix/*.cpp util/radix/joins/*.cpp util/radix/aggregations/*.cpp values/*.cpp expressions/*.cpp plugins/*.cpp plugins/output/*.cpp operators/*.cpp memory/*.cpp)
add_library(codegen ${codegen})
set_target_properties(codegen PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})

#if(FALSE)
# not too sure if we should build "main", it looks like it has the same test cases as the gtests
add_executable(rawmain main.cpp)
set_target_properties(rawmain PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(rawmain codegen)
target_link_libraries(rawmain jsmn)
target_link_libraries(rawmain -lglog ${glog_ldflags})
target_link_libraries(rawmain ${llvm_ldflags} ${llvm_libs})

add_executable(rawmain-caches main-caches.cpp)
set_target_properties(rawmain-caches PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(rawmain-caches codegen)
target_link_libraries(rawmain-caches jsmn)
target_link_libraries(rawmain-caches -lglog ${glog_ldflags})
target_link_libraries(rawmain-caches ${llvm_ldflags} ${llvm_libs})

add_executable(rawmain-nest main-nest.cpp)
set_target_properties(rawmain-nest PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(rawmain-nest codegen)
target_link_libraries(rawmain-nest jsmn)
target_link_libraries(rawmain-nest -lglog ${glog_ldflags})
target_link_libraries(rawmain-nest ${llvm_ldflags} ${llvm_libs})

add_executable(rawmain-str main-str.cpp)
set_target_properties(rawmain-str PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(rawmain-str codegen)
target_link_libraries(rawmain-str jsmn)
target_link_libraries(rawmain-str -lglog ${glog_ldflags})
target_link_libraries(rawmain-str ${llvm_ldflags} ${llvm_libs})

add_executable(rawmain-reduce main-reduce.cpp)
set_target_properties(rawmain-reduce PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(rawmain-reduce codegen)
target_link_libraries(rawmain-reduce jsmn)
target_link_libraries(rawmain-reduce -lglog ${glog_ldflags})
target_link_libraries(rawmain-reduce ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-projections tpch-csv-projections.cpp)
set_target_properties(tpch-csv-projections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-projections codegen)
target_link_libraries(tpch-csv-projections jsmn)
target_link_libraries(tpch-csv-projections -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-projections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-projections-cached tpch-csv-projections-cached.cpp)
set_target_properties(tpch-csv-projections-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-projections-cached codegen)
target_link_libraries(tpch-csv-projections-cached jsmn)
target_link_libraries(tpch-csv-projections-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-projections-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-selections tpch-csv-selections.cpp)
set_target_properties(tpch-csv-selections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-selections codegen)
target_link_libraries(tpch-csv-selections jsmn)
target_link_libraries(tpch-csv-selections -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-selections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-selections-cached tpch-csv-selections-cached.cpp)
set_target_properties(tpch-csv-selections-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-selections-cached codegen)
target_link_libraries(tpch-csv-selections-cached jsmn)
target_link_libraries(tpch-csv-selections-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-selections-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-joins tpch-csv-joins.cpp)
set_target_properties(tpch-csv-joins PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-joins codegen)
target_link_libraries(tpch-csv-joins jsmn)
target_link_libraries(tpch-csv-joins -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-joins ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-csv-groups tpch-csv-groups.cpp)
set_target_properties(tpch-csv-groups PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-csv-groups codegen)
target_link_libraries(tpch-csv-groups jsmn)
target_link_libraries(tpch-csv-groups -lglog ${glog_ldflags})
target_link_libraries(tpch-csv-groups ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-projections tpch-json-projections.cpp)
set_target_properties(tpch-json-projections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-projections codegen)
target_link_libraries(tpch-json-projections jsmn)
target_link_libraries(tpch-json-projections -lglog ${glog_ldflags})
target_link_libraries(tpch-json-projections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-projections-cached tpch-json-projections-cached.cpp)
set_target_properties(tpch-json-projections-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-projections-cached codegen)
target_link_libraries(tpch-json-projections-cached jsmn)
target_link_libraries(tpch-json-projections-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-json-projections-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-selections tpch-json-selections.cpp)
set_target_properties(tpch-json-selections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-selections codegen)
target_link_libraries(tpch-json-selections jsmn)
target_link_libraries(tpch-json-selections -lglog ${glog_ldflags})
target_link_libraries(tpch-json-selections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-selections-cached tpch-json-selections-cached.cpp)
set_target_properties(tpch-json-selections-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-selections-cached codegen)
target_link_libraries(tpch-json-selections-cached jsmn)
target_link_libraries(tpch-json-selections-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-json-selections-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-groups tpch-json-groups.cpp)
set_target_properties(tpch-json-groups PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-groups codegen)
target_link_libraries(tpch-json-groups jsmn)
target_link_libraries(tpch-json-groups -lglog ${glog_ldflags})
target_link_libraries(tpch-json-groups ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-groups-cached tpch-json-groups-cached.cpp)
set_target_properties(tpch-json-groups-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-groups-cached codegen)
target_link_libraries(tpch-json-groups-cached jsmn)
target_link_libraries(tpch-json-groups-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-json-groups-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-projections tpch-bin-projections.cpp)
set_target_properties(tpch-bin-projections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-projections codegen)
target_link_libraries(tpch-bin-projections jsmn)
target_link_libraries(tpch-bin-projections -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-projections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-selections tpch-bin-selections.cpp)
set_target_properties(tpch-bin-selections PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-selections codegen)
target_link_libraries(tpch-bin-selections jsmn)
target_link_libraries(tpch-bin-selections -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-selections ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-joins tpch-bin-joins.cpp)
set_target_properties(tpch-bin-joins PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-joins codegen)
target_link_libraries(tpch-bin-joins jsmn)
target_link_libraries(tpch-bin-joins -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-joins ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-joins-cached tpch-bin-joins-cached.cpp)
set_target_properties(tpch-bin-joins-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-joins-cached codegen)
target_link_libraries(tpch-bin-joins-cached jsmn)
target_link_libraries(tpch-bin-joins-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-joins-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-groups tpch-bin-groups.cpp)
set_target_properties(tpch-bin-groups PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-groups codegen)
target_link_libraries(tpch-bin-groups jsmn)
target_link_libraries(tpch-bin-groups -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-groups ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-bin-groups-cached tpch-bin-groups-cached.cpp)
set_target_properties(tpch-bin-groups-cached PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-bin-groups-cached codegen)
target_link_libraries(tpch-bin-groups-cached jsmn)
target_link_libraries(tpch-bin-groups-cached -lglog ${glog_ldflags})
target_link_libraries(tpch-bin-groups-cached ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-materializers tpch-materializers.cpp)
set_target_properties(tpch-materializers PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-materializers codegen)
target_link_libraries(tpch-materializers jsmn)
target_link_libraries(tpch-materializers -lglog ${glog_ldflags})
target_link_libraries(tpch-materializers ${llvm_ldflags} ${llvm_libs})
#endif()

add_executable(tpch-json-joins tpch-json-joins.cpp)
set_target_properties(tpch-json-joins PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-joins codegen)
target_link_libraries(tpch-json-joins jsmn)
target_link_libraries(tpch-json-joins -lglog ${glog_ldflags})
target_link_libraries(tpch-json-joins ${llvm_ldflags} ${llvm_libs})

add_executable(tpch-json-unnests tpch-json-unnests.cpp)
set_target_properties(tpch-json-unnests PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(tpch-json-unnests codegen)
target_link_libraries(tpch-json-unnests jsmn)
target_link_libraries(tpch-json-unnests -lglog ${glog_ldflags})
target_link_libraries(tpch-json-unnests ${llvm_ldflags} ${llvm_libs})

add_executable(symantec-json symantec-json.cpp)
set_target_properties(symantec-json PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(symantec-json codegen)
target_link_libraries(symantec-json jsmn)
target_link_libraries(symantec-json -lglog ${glog_ldflags})
target_link_libraries(symantec-json ${llvm_ldflags} ${llvm_libs})

#real-world experiments
add_executable(spam-bin experiments/realworld/spam-bin.cpp)
set_target_properties(spam-bin PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(spam-bin codegen)
target_link_libraries(spam-bin jsmn)
target_link_libraries(spam-bin -lglog ${glog_ldflags})
target_link_libraries(spam-bin ${llvm_ldflags} ${llvm_libs})

add_executable(spam-csv experiments/realworld/spam-csv.cpp)
set_target_properties(spam-csv PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(spam-csv codegen)
target_link_libraries(spam-csv jsmn)
target_link_libraries(spam-csv -lglog ${glog_ldflags})
target_link_libraries(spam-csv ${llvm_ldflags} ${llvm_libs})

# build googletest lib using the source code provided by the ubuntu package.
include(ExternalProject)
if(GTEST)
 if(NOT EXISTS ${GTEST})
  message(FATAL_ERROR "location " ${GTEST} " doesn't exist")
 endif()
 include_directories(${GTEST}/include)
else()
 set(GTEST /usr/src/gtest)
endif()

find_path(GTEST_SRC NAMES src/gtest_main.cc PATHS ${GTEST})

if(${GTEST_SRC} STREQUAL "GTEST_SRC-NOTFOUND")
 message(FATAL_ERROR "src/gtest_main.cc not found in ${GTEST}")
endif()

ExternalProject_Add(gtest SOURCE_DIR ${GTEST_SRC} PREFIX ${CMAKE_CURRENT_BINARY_DIR} INSTALL_COMMAND "")
ExternalProject_Get_Property(gtest binary_dir)
set(GTEST_LIBRARY ${binary_dir}/${CMAKE_FIND_LIBRARY_PREFIXES}gtest.a)
set(GTEST_MAIN_LIBRARY ${binary_dir}/${CMAKE_FIND_LIBRARY_PREFIXES}gtest_main.a)

# compile our unit-tests
file(GLOB gtest_src tests/*.cpp)
add_executable(unit-tests ${gtest_src})
set_target_properties(unit-tests PROPERTIES COMPILE_FLAGS ${LLVM_CPPFLAGS})
target_link_libraries(unit-tests codegen)
target_link_libraries(unit-tests jsmn)
target_link_libraries(unit-tests ${GTEST_LIBRARY})
target_link_libraries(unit-tests ${GTEST_MAIN_LIBRARY})
target_link_libraries(unit-tests -lglog ${glog_ldflags})
target_link_libraries(unit-tests ${llvm_ldflags} ${llvm_libs})
# copy data files too
file(COPY "inputs" DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

enable_testing()
add_test(UT unit-tests)
