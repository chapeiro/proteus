#!/bin/bash
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

RETVAL=0
CLANG_FORMAT_VERSION=10

if ! [ -x "$(command -v clang-format-$CLANG_FORMAT_VERSION)" ]; then
  echo "*****************************************************************"
  echo "*                                                               *"
  echo "* Error: clang-format-$CLANG_FORMAT_VERSION is not installed.                      *"
  echo "*                                                               *"
  echo "*****************************************************************"
  echo "Error: clang-format-$CLANG_FORMAT_VERSION is not installed" >&2
  exit 1
fi

format_file() {
  file="${1}"
  if [ -f $file ]; then
    clang-format-$CLANG_FORMAT_VERSION -i ${1}
    ${PROJECT_ROOT}/tools/check_licenses.py ${1} || RETVAL=1
    git add ${1}
  fi
}

panicked_bail_out() {
  echo "************************************************************"
  echo "*                                                          *"
  echo "*                     Commit aborted!                      *"
  echo "*                                                          *"
  echo "************************************************************"
  echo "Formatting the code caused merge conflicts: "
  git --no-pager diff --diff-filter=U
  echo "Fix the above conflicts and retry committing."
  echo "Hint: committing the full file will usually avoid conflicts."
  echo "************************************************************"
  echo "*                                                          *"
  echo "*                     Commit aborted!                      *"
  echo "*                                                          *"
  echo "************************************************************"
  git reset -q --hard
  git stash push -q --include-untracked -m $STASH_NAME-garbage
  git stash apply -q --index stash@{2}
  git stash drop -q
  RETVAL=1
}

STASH_NAME="pre-commit-$(date +%s)"

# Save current state to allow undoing if commit is rejected
git stash push -q --include-untracked -m $STASH_NAME-upon-failure
git stash apply -q --index # --index to re-instate index!

# Save unstage changes, to reapply in case the commit is accepted
git commit -q --no-verify -m $STASH_NAME
git stash push -q --include-untracked --keep-index -m $STASH_NAME-upon-success
git reset -q --soft HEAD~

for file in $(git diff-index --cached --name-only HEAD \*.{cpp,hpp,cu,cuh}) ; do
  format_file "${file}"
done

if [ $RETVAL -ne 0 ]; then
  # Ask author to fix licensing
  echo "************************************************************"
  echo "*                                                          *"
  echo "*             Fix licensing before committing!             *"
  echo "*                                                          *"
  echo "************************************************************"
  echo "You should only commit files that conform to our license!"
  printf "\nFor new files you may use the following header:\n"
  ${PROJECT_ROOT}/tools/check_licenses.py --print-license
fi

if [ $RETVAL -ne 0 ]; then
  # Reset working directory
  git reset -q --hard
  git stash apply -q --index stash@{1}  # --index to re-instate index!
else
  git stash apply --index || panicked_bail_out
fi

# Clean-up
git stash drop -q
git stash drop -q

exit $RETVAL
