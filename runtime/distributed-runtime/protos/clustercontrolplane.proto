/*
    Proteus -- High-performance query processing on heterogeneous hardware.

                            Copyright (c) 2020
        Data Intensive Applications and Systems Laboratory (DIAS)
                École Polytechnique Fédérale de Lausanne

                            All Rights Reserved.

    Permission to use, copy, modify and distribute this software and
    its documentation is hereby granted, provided that both the
    copyright notice and this permission notice appear in all copies of
    the software, derivative works or modified versions, and any
    portions thereof, and that both notices appear in supporting
    documentation.

    This code is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS
    DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
    RESULTING FROM THE USE OF THIS SOFTWARE.
*/

syntax = "proto3";

package proteus.distributed;

/*
*   NodeControlPlane
*     A gRPC-based command and control plane service for distributed
*     runtime of proteus. It enables inter-cluster control traffic,
*     including but not limited to node-discovery/registration,
*     start query-execution in remote-nodes.
*
*     This service should only be used for control-traffic across
*     execution nodes, specifically for node-control commands.
*     for query execution, each query should open exclusive channels,
*     given the type of network topolofy the query prefers, for example,
*     inifiniband RDMA-based channels.
*
*/


service NodeControlPlane {

  // Node-discovery protocol. every non-primary node calls this RPC
  //  in order to register themselves as executors to the primary node.
  rpc registerExecutor(NodeInfo) returns (NodeRegistrationReply) {}

  // Command-Control. A generic RPC-protocol for sending control
  //  commands between nodes. Should be extended as needed.
  rpc sendCommand(NodeCommand) returns (NodeStatusUpdate) {}


  // Statement preparation/execution: RPC methods for
  // communication query plans and synchronizing query execution
  // across execution-nodes.
  rpc prepareStatement(QueryPlan) returns (genericReply) {}
  rpc executeStatement(QueryPlan) returns (genericReply) {}


  // Optional RPCs as per standard distributed systems. Should be
  //  used/implemented as-per-need. The purpose of these RPCs is
  //  to have a single control-and-command service across
  // management of execution nodes. This service shouldn't be
  // used in critical-paths or inside query-execution.

  //rpc Heartbeat(HeartbeatRequest) returns (HeartbeatReply) {}
  rpc changeNodeStatus(NodeStatusUpdate) returns (genericReply) {}
}

//-----------------------
// Message structures for RPCs. extend and add information as-per-need.
//-----------------------

//-----------------------
// message NodeCommand
//      for sending generic control commands.
//-----------------------
message NodeCommand {
  enum Command {
    SHUTDOWN = 0;
  }
  Command command = 1;
}

//-----------------------
// message QueryPlan
//      for sending query plan with cluster-wide UUID.
//-----------------------
message QueryPlan{
  string query_uuid = 1;
  bytes jsonPlan = 2;
}

//-----------------------
// message NodeStatusUpdate
//      for reporting an internal status update of node.
//-----------------------
message NodeStatusUpdate{
  enum Status {
    AVAILABLE = 0;
    BUSY = 1;
    SHUTDOWN = 2;
  };
  int32 executor_id = 1;
  Status status = 2;
}

//-----------------------
// message genericReply
//      for generic reply, including ACK, ERRORs.
//-----------------------
message genericReply{
  enum Reply {
    ACK = 0;
    ERROR = 1;
  }
  Reply reply = 1;
}

//-----------------------
// message NodeTopology
//      for reporting detailed node topology.
//-----------------------
message NodeTopology{

  // cpu
  int32 n_numa_nodes = 1;
  int32 n_cores_per_numa = 2;
  int32 n_cpu_memory = 3;

  // gpus
  int32 n_gpus = 4;
  int32 n_gpus_per_numa = 5;
  int32 n_gpu_memory = 6;
  bool gds_enabled  = 7;

  // network
  int32 n_infiniband = 8;
  int32 n_infiniband_per_numa = 9;
  string interface_address = 10;

  // storage
  int32 n_nvme = 11;
  int32 n_nvme_per_numa = 12;
  bool nvmeof_enabled = 13;


}

//-----------------------
// message NodeInfo
//      for reporting node properties including control-address for listener.
//-----------------------
message NodeInfo{
  NodeTopology topology = 1;
  string control_address = 2; // so that master save this node for return message.
  int32 executor_id = 3;  // to-be assigned my primary-node only.
}

//-----------------------
// message NodeRegistrationReply
//      reply for node-registration service with assigned executor id.
//-----------------------
message NodeRegistrationReply {
  int32 executor_id = 1;

}

