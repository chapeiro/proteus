#############################################################################
# gitlab-runner:docker executor options
image: chapeiro/pelago-build:latest
# - Add support for docker-in-docker tests / build processes

#############################################################################
variables:
 GIT_SUBMODULE_STRATEGY: recursive
 # GIT_DEPTH: "1"

#############################################################################
stages:
 - Configure            # Environment configuration

 - Check Out            # When extra steps are needed to checkout the sources

 - Build Tools          # When extra tools are required

 - Build Libraries      # When extra libraries are required 

 - Build                # Build the project

 - Install              # Install the software so it can be run for tests

 - Test                 # Functional tests

 - Benchmark            # Performance tests (need to be tagged in order to be
                        # run on a noise-free system)

 - Package              # Create archives to be installed

 - Publish              # Publish the packages

 - Build Profile        # Build the project with profiling information

 - Profile              # Profile using known workload

#############################################################################
# Helper Templates

# before_script:


# after_script:
#  # we have to recalculate cache_path here
#  - cache_path=$(pwd | sed "s/^\/builds/\/cache/g")/${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}
#  - cp -p -t ${cache_path} .*done || true

#----------------------------------------------------------------------------
# Caching policies templates

# As we keep the build & install marker files, we need to make sure the
# corresponding binaries are kept as well. While this works for all the C/C++
# projects as we build them outside of the sources, SBT does assume its own
# folder layout, which starts in src/<projetc>. Thus we need to keep a cache
# of the src folder as well.
# FIXME: Can we configure SBT to store the generated files under build?
# FIXME: Can we configure SBT to install the generated JAR under opt?
# FIXME: What about npm?
.cache: &cache
 tags:
  - pelago
 cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
  paths:
   - target
   - project/target
   - project/.ivy
   - project/project
   - project/.boot

.cache: &cache_readonly
 tags:
  - pelago
 cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
  paths:
   - target
   - project/target
   - project/.ivy
   - project/project
   - project/.boot
  policy: pull

.cache: &cache_profile
 cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}-profile"
  paths:
   - target
   - project/target
   - project/.ivy
   - project/project
   - project/.boot

#----------------------------------------------------------------------------
# Execution restrictions templates
.restrict_precommit: &restrict_precommit
 except:
  - tags

.restrict_postcommit: &restrict_postcommit
 only:
  - tags

.restrict_latest: &restrict_latest
 except:
  - tags
 only:
  - master

.restrict_release: &restrict_release
 only:
  - tags

#----------------------------------------------------------------------------
# Job templates
.test: &test
 stage: Test
 # Using policy hear is overwritten by the inclusion of cache below
 # cache:
 #  policy: pull
 # <<: *cache
 <<: *cache_readonly
 <<: *restrict_precommit

.benchmark: &benchmark
 stage: Benchmark
 cache:
  policy: pull
 <<: *cache

#############################################################################
# Example jobs
#----------------------------------------------------------------------------

# Workaround until we replace the docker image
.configure-packages:
 stage: Configure
 script:
  - echo "Configure... done"
 <<: *cache
 <<: *restrict_precommit

# Check-out environment
.check-out-submodules:
 stage: Check Out
 script:
  - echo "Check Out... done"
 <<: *cache
 <<: *restrict_precommit

#----------------------------------------------------------------------------
# Setup build environment
.build-tools:
 stage: Build Tools
 script:
  - echo "Building tools... done"
 <<: *cache
 <<: *restrict_precommit

.build-libraries:
 stage: Build Libraries
 script:
  - echo "Building external libs... done"
 <<: *cache
 <<: *restrict_precommit

#----------------------------------------------------------------------------
# Setup test environment
build:
 stage: Build
 script:
  # Do not share downloaded jars with other projects/runs, in order to catch
  # missing dependencies, instead of using someone else's dependencies
  - sbt -no-share assembly
  # Also, as no-share uses the local folders to store the dependencies, we
  # can benefit from caching
  - echo "Building... done"
 <<: *cache
 <<: *restrict_precommit

.install:
 stage: Install
 script:
  - echo "Installing... done"
 <<: *cache
 <<: *restrict_precommit

#----------------------------------------------------------------------------
# Functional Tests
test - queries (mock engine):
 <<: *test
 script:
  # For now return success for failures because of missing catalog/schema
  # Propagate to Pelago the full testing
  # FIXME: but at some point we should fix that...
  - ln -s /data/ssbm100 inputs/ssbm100
  - ln -s /data/tpch1   inputs/tpch1
  - sbt -no-share test
 artifacts:
  paths:
   - target/test-reports/TEST-*.xml
  reports:
   junit: target/test-reports/TEST-*.xml


#----------------------------------------------------------------------------
# Performance Tests
# unhide the jobs by removing the leading '.'
bench:
 stage: Benchmark
 script:
  - echo "Bench... done"
 <<: *cache
 <<: *restrict_precommit

.1/2 benchmark:
 <<: *benchmark
 script:
  - echo "Benchmark 2... done"

.2/2 benchmark:
 <<: *benchmark
 script:
  - echo "Benchmark 2... done"

#----------------------------------------------------------------------------
# Execution Profiling 
# unhide the jobs by removing the leading '.'
.build profile:
 stage: Build Profile
 script:
  - echo "Building Dependencies... done"
  - echo "Building... done"
  - echo "Installing... done"
 when: manual
 <<: *cache_profile
 <<: *restrict_precommit

.1/2 profile:
 stage: Profile
 script:
  - echo "Running workload 1... done"
  - echo "Extracting profiling statistics"
 when: manual
 cache:
  policy: pull
 <<: *cache_profile
 <<: *restrict_precommit

.2/2 profile:
 stage: Profile
 script:
  - echo "Running workload 2... done"
  - echo "Extracting profiling statistics"
 when: manual
 cache:
  policy: pull
 <<: *cache_profile
 <<: *restrict_precommit

#----------------------------------------------------------------------------
# Packaging & distribution
.tar:
 stage: Package
 script:
  - echo "Generating tar... done"
 <<: *cache
 <<: *restrict_postcommit

.tar:latest:
 stage: Publish
 script:
  - echo "Publishing HEAD... done"
 artifacts:
  name: "$CI_PROJECT_NAME-g$CI_COMMIT_SHA"
  paths:
   - pkg/
 cache:
  policy: pull
 <<: *cache
 <<: *restrict_latest

.tar:release:
 stage: Publish
 script:
  - echo "Publishing release... done"
 artifacts:
  name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"
  paths:
   - pkg/
 cache:
  policy: pull
 <<: *cache
 <<: *restrict_release
