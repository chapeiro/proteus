#############################################################################
# gitlab-runner:docker executor options
image: chapeiro/pelago-build:cuda10.1-llvm8

#############################################################################
variables:
 GIT_SUBMODULE_STRATEGY: recursive

#############################################################################
stages:
 - Code quality         # Environment configuration

 - Configure            # Environment configuration

 - Build                # Build the project

 - Install              # Install the software so it can be run for tests

 - Test                 # Functional tests

 - Benchmark            # Performance tests (need to be tagged in order to be
                        # run on a noise-free system)

 - Package              # Create archives to be installed

 - Publish              # Publish the packages

 - Build Profile        # Build the project with profiling information

 - Profile              # Profile using known workload

#############################################################################
# Helper Templates

before_script:
 # TODO: we should probably remove the next lines and fix that in executor
 - mkdir inputs
 - ln -s /data/ssbm100 inputs/ssbm100
 - ln -s /data/tpch1 inputs/tpch1

# after_script:
#  - true


#----------------------------------------------------------------------------
# Caching policies templates

.cache: &cache
 tags:
  - pelago
 cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
  paths:
   - src/panorama
   - src/planner
   - src/SQLPlanner

.cache: &cache_profile
 cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}-profile"
  paths:
   - src/panorama
   - src/planner
   - src/SQLPlanner

#----------------------------------------------------------------------------
# Execution restrictions templates
.restrict_precommit: &restrict_precommit
 except:
  - tags

.restrict_postcommit: &restrict_postcommit
 only:
  - master
  - tags

.restrict_latest: &restrict_latest
 except:
  - tags
 only:
  - master

.restrict_release: &restrict_release
 only:
  - tags

#----------------------------------------------------------------------------
# Job templates
.test: &test
 stage: Test
 cache:
  policy: pull
 <<: *cache
 <<: *restrict_precommit

.benchmark: &benchmark
 stage: Benchmark
 cache:
  policy: pull
 <<: *cache

#############################################################################
# Example jobs
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------

codestyle:
 stage: Code quality
 script:
 # clang-format comes from the llvm repo: https://apt.llvm.org/
 # remember to update it every time we pop the LLVM version!
 # if grep returns an error, it didn't find a match, which is OK for us
 - find . \( -name '*.cpp' -o -name '*.hpp' -o -name '*.cu' -o -name '*.cuh' \) | xargs -n1 clang-format -output-replacements-xml --style=file | grep "replacement " || exit 0
 # otherwise, print message and exist with error code
 - echo "Non conforming format"
 - exit 1
 <<: *cache
 <<: *restrict_precommit

licenses:
 stage: Code quality
 script:
 - python check_licenses.py
 <<: *cache
 <<: *restrict_precommit
